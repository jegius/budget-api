#!/bin/bash

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤
create_tree() {
    local dir="$1"
    local output_file="$2"

    walk() {
        local current_dir="$1"
        local prefix="$2"

        local entries=()
        while IFS= read -r -d '' entry; do
            local basename_entry=$(basename "$entry")
            if [[ "$basename_entry" != "node_modules" &&
                  "$basename_entry" != "dist" &&
                  "$basename_entry" != ".git" &&
                  "$basename_entry" != ".idea" &&
                  "$basename_entry" != ".vscode" ]]; then
                entries+=("$entry")
            fi
        done < <(find "$current_dir" -mindepth 1 -maxdepth 1 -print0 | sort -V)

        local count=${#entries[@]}
        local index=0

        for entry in "${entries[@]}"; do
            local basename_entry=$(basename "$entry")
            local is_last_entry=$((++index == count))

            if [[ -d "$entry" ]]; then
                if [[ $is_last_entry -eq 1 ]]; then
                    echo "${prefix}‚îî‚îÄ‚îÄ ${basename_entry}" >> "$output_file"
                    walk "$entry" "${prefix}    "
                else
                    echo "${prefix}‚îú‚îÄ‚îÄ ${basename_entry}" >> "$output_file"
                    walk "$entry" "${prefix}‚îÇ   "
                fi
            else
                if [[ $is_last_entry -eq 1 ]]; then
                    echo "${prefix}‚îî‚îÄ‚îÄ ${basename_entry}" >> "$output_file"
                else
                    echo "${prefix}‚îú‚îÄ‚îÄ ${basename_entry}" >> "$output_file"
                fi
            fi
        done
    }

    echo "$(basename "$dir")" > "$output_file"
    walk "$dir" ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤
collect_content() {
    local dir="$1"
    local output_file="$2"
    local self_name=$(basename "$0")      # –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    local output_filename=$(basename "$output_file")  # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, project_documentation.txt)

    create_tree "$dir" "$output_file"
    echo "" >> "$output_file"

    while IFS= read -r -d '' file; do
        if file --mime-type "$file" 2>/dev/null | grep -q "text/"; then
            echo "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: $file"
            echo "// === –§–∞–π–ª: $file ===" >> "$output_file"
            cat "$file" >> "$output_file" 2>/dev/null || echo "// ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞" >> "$output_file"
            echo "" >> "$output_file"
        else
            echo "‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: $file"
            echo "// === –§–∞–π–ª: $file (–±–∏–Ω–∞—Ä–Ω—ã–π, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ) ===" >> "$output_file"
            echo "" >> "$output_file"
        fi
    done < <(find "$dir" -type f \
        -not -path "*/node_modules/*" \
        -not -path "*/dist/*" \
        -not -path "*/.git/*" \
        -not -path "*/.idea/*" \
        -not -path "*/.vscode/*" \
        -not -name "$self_name" \
        -not -name "$output_filename" \
        -not -name "README.md" -print0 -print0)  # ‚Üê‚Üê‚Üê –∏—Å–∫–ª—é—á–∞–µ–º –∏ —Å–∫—Ä–∏–ø—Ç, –∏ —Ñ–∞–π–ª –≤—ã–≤–æ–¥–∞
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
OUTPUT_FILE="project_documentation.txt"

if [ $# -eq 0 ]; then
    START_DIR="."
else
    START_DIR="$1"
fi

if [ ! -d "$START_DIR" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: '$START_DIR' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
    exit 1
fi

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞..."
echo "üìÅ –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫–∏: node_modules, dist, .git, .idea, .vscode"
echo "üö´ –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º —Å–∫—Ä–∏–ø—Ç: $(basename "$0")"
echo "üö´ –ò—Å–∫–ª—é—á–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: $OUTPUT_FILE"
echo ""

collect_content "$START_DIR" "$OUTPUT_FILE"

echo ""
echo "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: $OUTPUT_FILE"
echo "üì¶ –í–∫–ª—é—á–µ–Ω—ã –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –∏ project_documentation.txt."